local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

local function createShadow(parent)
    local shadowSize = 6
    local transparencyStep = 0.2
    for i = 1, shadowSize do
        local shadow = Instance.new("Frame", parent)
        shadow.Name = "Shadow" .. i
        shadow.BackgroundColor3 = Color3.new(0, 0, 0)
        shadow.BorderSizePixel = 0
        shadow.ZIndex = parent.ZIndex - 1
        shadow.Size = UDim2.new(1, shadowSize * 2, 1, shadowSize * 2)
        shadow.Position = UDim2.new(0, -shadowSize, 0, -shadowSize)
        shadow.BackgroundTransparency = 1 - (i * transparencyStep / shadowSize)
    end
end

local function makeDraggable(uiElement, frame)
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    uiElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    uiElement.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    uiElement.InputEnded:Connect(function(input)
        if input == dragInput and dragging then
            dragging = false
        end
    end)

    uiElement.Parent.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            update(input)
        end
    end)
end

function GuiLibrary.new(screenGui, title)
    local self = setmetatable({}, GuiLibrary)
    self.screenGui = screenGui
    self.title = title
    self.tabs = {}
    self.tabContents = {}
    self.buttons = {}
    self:init()
    return self
end

function GuiLibrary:init()
    -- Main GUI Window
    self.window = Instance.new("Frame")
    self.window.Name = "GuiLibraryWindow"
    self.window.Parent = self.screenGui
    self.window.Size = UDim2.new(0, 400, 0, 300)
    self.window.Position = UDim2.new(0.5, -200, 0.5, -150)
    self.window.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.window.BorderSizePixel = 0
    self.window.ZIndex = 1
    self.window.Visible = true

    -- Title Bar
    self.titleBar = Instance.new("TextLabel", self.window)
    self.titleBar.Size = UDim2.new(1, 0, 0, 24)
    self.titleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    self.titleBar.Text = self.title
    self.titleBar.ZIndex = 2
    self.titleBar.BorderSizePixel = 0
    self.titleBar.TextColor3 = Color3.new(1, 1, 1)
    self.titleBar.Font = Enum.Font.SourceSansBold
    self.titleBar.TextScaled = true

    -- Make title bar draggable
    makeDraggable(self.titleBar, self.window)
    createShadow(self.window)

    -- Close Button
    self.closeButton = Instance.new("TextButton", self.titleBar)
    self.closeButton.Size = UDim2.new(0, 24, 0, 24)
    self.closeButton.Position = UDim2.new(1, -24, 0, 0)
    self.closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    self.closeButton.Text = "X"
    self.closeButton.TextColor3 = Color3.new(1, 1, 1)
    self.closeButton.ZIndex = 2
    self.closeButton.BorderSizePixel = 0
    self.closeButton.Font = Enum.Font.SourceSans
    self.closeButton.TextSize = 14
    self.closeButton.MouseButton1Click:Connect(function()
        self.window:Destroy()
    end)

    -- Tabs Frame
    self.tabsFrame = Instance.new("Frame", self.window)
    self.tabsFrame.Size = UDim2.new(1, 0, 0, 24)
    self.tabsFrame.Position = UDim2.new(0, 0, 0, self.titleBar.Size.Y.Offset)
    self.tabsFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    self.tabsFrame.BorderSizePixel = 0
    self.tabsFrame.ZIndex = 1

    -- Content Frame
    self.contentFrame = Instance.new("Frame", self.window)
    self.contentFrame.Size = UDim2.new(1, 0, 1, -self.titleBar.Size.Y.Offset - self.tabsFrame.Size.Y.Offset)
    self.contentFrame.Position = UDim2.new(0, 0, 0, self.titleBar.Size.Y.Offset + self.tabsFrame.Size.Y.Offset)
    self.contentFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.contentFrame.BorderSizePixel = 0
    self.contentFrame.ZIndex = 1
    self.contentFrame.BackgroundTransparency = 1
end

function GuiLibrary:addTab(name)
    local tab = Instance.new("TextButton", self.tabsFrame)
    tab.Name = name
    tab.Text = name
    tab.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    tab.Size = UDim2.new(0, 100, 1, 0)
    tab.ZIndex = 2
    tab.TextColor3 = Color3.new(1, 1, 1)
    tab.Font = Enum.Font.SourceSansBold
    tab.TextScaled = true

    local content = Instance.new("Frame", self.contentFrame)
    content.Name = name.."Content"
    content.Size = UDim2.new(1, 0, 1, 0)
    content.BackgroundTransparency = 1
    content.ZIndex = 1
    content.Visible = false

    self.tabs[name] = tab
    self.tabContents[name] = content

    tab.MouseButton1Click:Connect(function()
        for _, v in pairs(self.tabContents) do
            v.Visible = false
        end
        self.tabContents[name].Visible = true
    end)

    self:autoSortTabs()
end

function GuiLibrary:autoSortTabs()
    local tabCount = #self.tabsFrame:GetChildren()
    local tabWidth = 1 / tabCount
    for i, tab in ipairs(self.tabsFrame:GetChildren()) do
        tab.Size = UDim2.new(tabWidth, -4, 1, 0)
        tab.Position = UDim2.new((i - 1) * tabWidth, 2, 0, 0)
    end
end

function GuiLibrary:addButton(tabName, buttonText, callback)
    local content = self.tabContents[tabName]
    if not content then
        warn("Tab content not found:", tabName)
        return
    end

    local button = Instance.new("TextButton", content)
    button.Name = buttonText
    button.Text = buttonText
    button.Size = UDim2.new(1, -20, 0, 50)
    button.Position = UDim2.new(0, 10, 0, #content:GetChildren() * 60)
    button.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    button.ZIndex = 2
    button.BorderSizePixel = 0
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.SourceSansBold
    button.TextScaled = true

    if callback then
        button.MouseButton1Click:Connect(callback)
    end

    self.buttons[buttonText] = button
end

function GuiLibrary:CreateToggle(tabName, toggleText, callback)
    local content = self.tabContents[tabName]
    if not content then
        warn("Tab content not found:", tabName)
        return
    end

    local toggle = Instance.new("TextButton", content)
    toggle.Name = toggleText
    toggle.Text = toggleText
    toggle.Size = UDim2.new(1, -20, 0, 50)
    toggle.Position = UDim2.new(0, 10, 0, #content:GetChildren() * 60)
    toggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    toggle.ZIndex = 2
    toggle.BorderSizePixel = 0
    toggle.TextColor3 = Color3.new(1, 1, 1)
    toggle.Font = Enum.Font.SourceSansBold
    toggle.TextScaled = true

    local toggleState = false
    local function updateToggle()
        if toggleState then
            toggle.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        else
            toggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        end
    end

    toggle.MouseButton1Click:Connect(function()
        toggleState = not toggleState
        updateToggle()
        if callback then
            callback(toggleState)
        end
    end)

    updateToggle() 
    self.buttons[toggleText] = toggle
end

local screenGui = Instance.new("ScreenGui", game.Players.LocalPlayer.PlayerGui)
local myGui = GuiLibrary.new(screenGui, "Minty Hub")

myGui:addTab("Auto Farm")
myGui:addTab("About")
local firstTabName = next(myGui.tabs)
if firstTabName then
    myGui.tabContents[firstTabName].Visible = true
end

local autoCollectorb = false
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local lastPosition = hrp.Position
local isStuck = false

local function getNearestOrb()
    local nearestOrb = nil
    local shortestDistance = math.huge
    local orbs = game.Workspace.__THINGS.Orbs:GetChildren()

    for _, orb in ipairs(orbs) do
        if orb:IsA("Part") then
            local distance = (hrp.Position - orb.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestOrb = orb
            end
        end
    end

    return nearestOrb
end

local function teleportToNearestOrb()
    if not autoCollectorb or isStuck then return end

    local nearestOrb = getNearestOrb()
    if nearestOrb then
        hrp.CFrame = CFrame.new(nearestOrb.Position)
        if (lastPosition - hrp.Position).Magnitude < 1 then 
            isStuck = true
            wait(0.5)
            isStuck = false
        end
        lastPosition = hrp.Position
    end
end

RunService.Heartbeat:Connect(teleportToNearestOrb)

myGui:CreateToggle("Auto Farm", "Collect orbs", function(state)
    autoCollectorb = state
end)
