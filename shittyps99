local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

local function createShadow(parent)
    local shadowSize = 6
    local transparencyStep = 0.2
    for i = 1, shadowSize do
        local shadow = Instance.new("Frame", parent)
        shadow.Name = "Shadow" .. i
        shadow.BackgroundColor3 = Color3.new(0, 0, 0)
        shadow.BorderSizePixel = 0
        shadow.ZIndex = parent.ZIndex - 1
        shadow.Size = UDim2.new(1, shadowSize * 2, 1, shadowSize * 2)
        shadow.Position = UDim2.new(0, -shadowSize, 0, -shadowSize)
        shadow.BackgroundTransparency = 1 - (i * transparencyStep / shadowSize)
    end
end

local function makeDraggable(uiElement, frame)
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    uiElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    uiElement.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    uiElement.InputEnded:Connect(function(input)
        if input == dragInput and dragging then
            dragging = false
        end
    end)

    uiElement.Parent.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            update(input)
        end
    end)
end

function GuiLibrary.new(screenGui, title)
    -- First, make sure any previous window is destroyed
    if screenGui:FindFirstChild("GuiLibraryWindow") then
        screenGui:FindFirstChild("GuiLibraryWindow"):Destroy()
    end

    -- Set up the new window
    local self = setmetatable({}, GuiLibrary)
    self.window = Instance.new("Frame")
    self.window.Name = "GuiLibraryWindow"
    self.window.Parent = screenGui
    self.window.Size = UDim2.new(0, 400, 0, 300)
    self.window.Position = UDim2.new(0.5, -200, 0.5, -150)
    self.window.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.window.BorderSizePixel = 0
    self.window.ZIndex = 1
    self.window.Visible = true

    -- Title bar setup
    self.titleBar = Instance.new("TextLabel", self.window)
    self.titleBar.Size = UDim2.new(1, 0, 0, 24)
    self.titleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    self.titleBar.Text = title or "Window"
    self.titleBar.ZIndex = 2
    self.titleBar.BorderSizePixel = 0
    self.titleBar.TextColor3 = Color3.new(1, 1, 1)
    self.titleBar.Font = Enum.Font.SourceSansBold
    self.titleBar.TextScaled = true

    -- Draggable functionality
    makeDraggable(self.titleBar, self.window)
    createShadow(self.window)

    -- Close button setup
    local closeButton = Instance.new("TextButton", self.titleBar)
    closeButton.Size = UDim2.new(0, 24, 0, 24)
    closeButton.Position = UDim2.new(1, -24, 0, 0)
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.new(1, 1, 1)
    closeButton.ZIndex = 2
    closeButton.BorderSizePixel = 0
    closeButton.Font = Enum.Font.SourceSans
    closeButton.TextSize = 14
    closeButton.MouseButton1Click:Connect(function()
        self.window:Destroy()
    end)

    self.tabs = {}
    self.buttons = {}

    return self
end

function GuiLibrary:addTab(name)
    assert(name, "Tab name is required")

    local tab = Instance.new("TextButton", self.window)
    tab.Name = name
    tab.Text = name
    tab.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    tab.Size = UDim2.new(0, 100, 0, 24)
    tab.ZIndex = 2
    tab.TextColor3 = Color3.new(1, 1, 1)
    tab.Font = Enum.Font.SourceSansBold
    tab.TextScaled = true
    self.tabs[name] = tab

    self:autoSortTabs()
end

function GuiLibrary:autoSortTabs()
    local tabCount = 0
    for _ in pairs(self.tabs) do tabCount = tabCount + 1 end
    local tabWidth = tabCount > 0 and 1 / tabCount or 1

    local index = 0
    for _, tab in pairs(self.tabs) do
        tab.Size = UDim2.new(tabWidth, -4, 0, 24)
        tab.Position = UDim2.new(index * tabWidth, 2, 0, 0)
        index = index + 1
    end
end

function GuiLibrary:addButton(tabName, buttonText, callback)
    assert(tabName and buttonText, "Tab name and button text are required")

    local tab = self.tabs[tabName]
    if not tab then
        warn("Tab not found:", tabName)
        return
    end

    local button = Instance.new("TextButton", tab)
    button.Name = buttonText
    button.Text = buttonText
    button.Size = UDim2.new(1, -20, 0, 50)
    button.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    button.ZIndex = 2
    button.BorderSizePixel = 0
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.SourceSansBold
    button.TextScaled = true
    self.buttons[buttonText] = button

    if callback then
        button.MouseButton1Click:Connect(callback)
    end

    self:autoSortButtons(tab)
end

function GuiLibrary:autoSortButtons(tab)
    local buttonHeight = 50
    local yPos = 24 -- Start below the tab
    for _, button in pairs(tab:GetChildren()) do
        if button:IsA("TextButton") then
            button.Position = UDim2.new(0.5, -button.Size.X.Offset / 2, 0, yPos)
            yPos = yPos + buttonHeight + 10
        end
    end
end

-- Example usage:
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local screenGui = Instance.new("ScreenGui", player.PlayerGui)
local myGui = GuiLibrary.new(screenGui, "Minty Hub")

myGui:addTab("Home")
myGui:addTab("Settings")
myGui:addTab("About")

myGui:addButton("Home", "Click Me", function()
    print("Button clicked")
end)
