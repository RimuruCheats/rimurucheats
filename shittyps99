local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

-- Function to create a 'manual' shadow effect
local function createShadow(parent)
    local shadowSize = 6  -- Determines how far the shadow extends
    local transparencyStep = 0.2  -- Determines shadow opacity
    for i = 1, shadowSize do
        local shadow = Instance.new("Frame", parent)
        shadow.Name = "Shadow" .. i
        shadow.BackgroundColor3 = Color3.new(0, 0, 0)
        shadow.BorderSizePixel = 0
        shadow.ZIndex = parent.ZIndex - 1
        shadow.Size = UDim2.new(1, shadowSize*2, 1, shadowSize*2)
        shadow.Position = UDim2.new(0, -shadowSize, 0, -shadowSize)
        shadow.BackgroundTransparency = 1 - (i * transparencyStep / shadowSize)
        shadow.Visible = true
    end
end

-- Function to make a UI element draggable
local function makeDraggable(uiElement, dragFunction)
    local dragging = false
    local dragStart, startPos

    uiElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = uiElement.Position
        end
    end)

    uiElement.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            dragFunction(startPos, dragStart, input.Position)
        end
    end)

    uiElement.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- Primary constructor for the GUI window
function GuiLibrary.new(screenGui, title)
    -- If an existing GUI is present, close it
    if screenGui:FindFirstChild("GuiLibraryWindow") then
        screenGui:FindFirstChild("GuiLibraryWindow"):Destroy()
    end

    local self = setmetatable({}, GuiLibrary)

    -- Main GUI window frame
    self.window = Instance.new("Frame")
    self.window.Name = "GuiLibraryWindow"
    self.window.Parent = screenGui
    self.window.Size = UDim2.new(0, 300, 0, 300)
    self.window.Position = UDim2.new(0.5, -150, 0.5, -150)
    self.window.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.window.BorderSizePixel = 0
    self.window.ZIndex = 1

    -- Title bar
    self.titleBar = Instance.new("TextLabel", self.window)
    self.titleBar.Size = UDim2.new(1, 0, 0, 24)
    self.titleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    self.titleBar.Text = title
    self.titleBar.ZIndex = 2
    self.titleBar.BorderSizePixel = 0
    
    -- Check if TextColor3 property is available
    if self.titleBar:IsA("TextLabel") then
        self.titleBar.TextColor3 = Color3.new(1, 1, 1)
    end

    -- Make the title bar draggable
    makeDraggable(self.titleBar, function(startPos, dragStart, currentPos)
        local delta = currentPos - dragStart
        self.window.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end)

    -- Shadow effect
    createShadow(self.window)

    -- Store tabs and buttons
    self.tabs = {}
    self.buttons = {}

    return self
end

-- Method to add tabs to the GUI
function GuiLibrary:addTab(name)
    local tab = Instance.new("TextButton", self.window)
    tab.Name = name
    tab.Text = name
    tab.Size = UDim2.new(0, 100, 0, 24)
    tab.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    tab.TextColor3 = Color3.white
    tab.ZIndex = 2
    self.tabs[name] = tab

    -- Auto-sort tabs
    self:autoSortTabs()
end

-- Method to auto-sort tabs
function GuiLibrary:autoSortTabs()
    local xPos = 0
    for _, tab in pairs(self.tabs) do
        tab.Position = UDim2.new(0, xPos, 0, self.titleBar.Size.Y.Offset)
        xPos = xPos + tab.Size.X.Offset
    end
end

-- Method to add buttons to tabs
function GuiLibrary:addButton(tabName, buttonText, callback)
    local tab = self.tabs[tabName]
    if not tab then
        warn("Tab not found:", tabName)
        return
    end

    local button = Instance.new("TextButton", tab)
    button.Name = buttonText
    button.Text = buttonText
    button.Size = UDim2.new(0, 200, 0, 50)
    button.Position = UDim2.new(0.5, -100, 0, 0) -- Centered within the tab
    button.AnchorPoint = Vector2.new(0.5, 0)
    button.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    button.TextColor3 = Color3.white
    button.ZIndex = 2
    button.BorderSizePixel = 0

    if callback then
        button.MouseButton1Click:Connect(callback)
    end

    self.buttons[buttonText] = button

    -- Auto-sort buttons
    self:autoSortButtons(tab)
end

-- Method to auto-sort buttons within a tab
function GuiLibrary:autoSortButtons(tab)
    local yPos = 0
    for _, button in pairs(self.buttons) do
        if button.Parent == tab then
            button.Position = UDim2.new(0.5, -button.Size.X.Offset / 2, 0, yPos + 50)
            yPos = yPos + button.Size.Y.Offset
        end
    end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
-- Create a new GUI
local myGui = GuiLibrary.new(playerGui, "Minty Hub")

-- Add tabs to the GUI
myGui:addTab("Home")
myGui:addTab("Settings")
myGui:addTab("About")

-- Add buttons to a specific tab
myGui:addButton("Home", "Click Me", function()
    print("Button clicked!")
end)
